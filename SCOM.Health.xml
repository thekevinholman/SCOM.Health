<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>SCOM.Health</ID>
      <Version>1.1.0.0</Version>
    </Identity>
    <Name>SCOM Health</Name>
    <References>
      <Reference Alias="MSDL">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Performance">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8443.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="SCOM.Health.DWRetentionConfigured.Monitor.DataSource" Accessibility="Internal" RunAs="MSDL!Microsoft.SystemCenter.DataWarehouse.ActionAccount" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="AlertDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="EventDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfRawDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfHourlyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfDailyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateRawDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateHourlyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateDailyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="AlertDays" Selector="$Config/AlertDays$" ParameterType="int" />
          <OverrideableParameter ID="EventDays" Selector="$Config/EventDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfRawDays" Selector="$Config/PerfRawDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfHourlyDays" Selector="$Config/PerfHourlyDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfDailyDays" Selector="$Config/PerfDailyDays$" ParameterType="int" />
          <OverrideableParameter ID="StateRawDays" Selector="$Config/StateRawDays$" ParameterType="int" />
          <OverrideableParameter ID="StateHourlyDays" Selector="$Config/StateHourlyDays$" ParameterType="int" />
          <OverrideableParameter ID="StateDailyDays" Selector="$Config/StateDailyDays$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.DWRetentionConfigured.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  DataWarehouse Default Retention Monitoring Script
#
#  Author: Kevin Holman
#  v1.1
#=================================================================================
param([int]$AlertDays,[int]$EventDays,[int]$PerfRawDays,[int]$PerfHourlyDays,[int]$PerfDailyDays,[int]$StateRawDays,[int]$StateHourlyDays,[int]$StateDailyDays)

# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# [int]$AlertDays = 180
# [int]$EventsDays = 30
# [int]$PerfRawDays = 10
# [int]$PerfHourlyDays = 180
# [int]$PerfDailyDays = 365
# [int]$StateRawDays = 90
# [int]$StateHourlyDays = 180
# [int]$StateDailyDays = 180
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.DWRetentionConfigured.Monitor.DataSource.ps1"
$EventID = "6607"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get SQLServer from Registry
$SCOMKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$SQLServer = (Get-ItemProperty $SCOMKey).DataWarehouseDBServerName
$SQLDBName = (Get-ItemProperty $SCOMKey).DataWarehouseDBName
$SQLQuery1 = "SELECT ds.datasetDefaultName AS 'DatasetName',
  CASE
    WHEN sda.AggregationTypeId = 0 THEN 'Raw'
	WHEN sda.AggregationTypeId = 20 THEN 'Hourly'
	WHEN sda.AggregationTypeId = 30 THEN 'Daily'
  END AS 'AggregationType',
 sda.MaxDataAgeDays AS 'RetentionDays'
FROM dataset ds, StandardDatasetAggregation sda 
WHERE ds.datasetid = sda.datasetid
AND (ds.DatasetDefaultName = 'Alert data set'
OR ds.DatasetDefaultName = 'Performance data set'
OR ds.DatasetDefaultName = 'State data set'
OR ds.DatasetDefaultName = 'Event data set')
ORDER by ds.datasetDefaultName, AggregationType DESC"


#Log event for captured parameters
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n SQLServer: ($SQLServer) `n SQLDatabase: ($SQLDBName).")

# Connect to and then Query the database
$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
$SqlConnection.ConnectionString = "Server=$SQLServer;Database=$SQLDBName;Integrated Security=True"
$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
$SqlCmd.CommandText = $SqlQuery1
$SqlCmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$ds = New-Object System.Data.DataSet
$SqlAdapter.Fill($ds) | Out-Null
#Close the SQL Connection
$SqlConnection.Close()


# Check for errors connecting to SQL
IF ($Error)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an attempting to connect to and query SQL. `n Terminating script. `n Error is: ($Error).")
  EXIT  
}

# Set the output to a variable
[array]$Rows = $ds.Tables[0]
$RowsCount = $Rows.Count

IF (!($RowsCount -eq 8))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an error getting records from SQL or no records were returned. `n Number of rows returned: ($RowsCount). `n Terminating script.")
  EXIT
}

# Set Result to default to a good condition which will be overwritten if a bad condition is found
[string]$FinalResult = "GoodCondition"

# Check Alert Retention
$AlertRow = $Rows | where {$_.DatasetName -eq "Alert data set"}
[int]$AlertRetentionDays = $AlertRow.RetentionDays
IF (!($AlertRetentionDays -eq $AlertDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('AlertDaysRetained',$AlertRetentionDays)
$bag.AddValue('AlertDaysExpected',$AlertDays)

# Check Event Retention
$EventRow = $Rows | where {$_.DatasetName -eq "Event data set"}
[int]$EventRetentionDays = $EventRow.RetentionDays
IF (!($EventRetentionDays -eq $EventDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('EventDaysRetained',$EventRetentionDays)
$bag.AddValue('EventDaysExpected',$EventDays)

# Check Perf Raw Retention
$PerfRawRow = $Rows | where {$_.DatasetName -eq "Performance data set" -and $_.AggregationType -eq "Raw"}
[int]$PerfRawRetentionDays = $PerfRawRow.RetentionDays
IF (!($PerfRawRetentionDays -eq $PerfRawDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('PerfRawDaysRetained',$PerfRawRetentionDays)
$bag.AddValue('PerfRawDaysExpected',$PerfRawDays)

# Check Perf Hourly Retention
$PerfHourlyRow = $Rows | where {$_.DatasetName -eq "Performance data set" -and $_.AggregationType -eq "Hourly"}
[int]$PerfHourlyRetentionDays = $PerfHourlyRow.RetentionDays
IF (!($PerfHourlyRetentionDays -eq $PerfHourlyDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('PerfHourlyDaysRetained',$PerfHourlyRetentionDays)
$bag.AddValue('PerfHourlyDaysExpected',$PerfHourlyDays)

# Check Perf Daily Retention
$PerfDailyRow = $Rows | where {$_.DatasetName -eq "Performance data set" -and $_.AggregationType -eq "Daily"}
[int]$PerfDailyRetentionDays = $PerfDailyRow.RetentionDays
IF (!($PerfDailyRetentionDays -eq $PerfDailyDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('PerfDailyDaysRetained',$PerfDailyRetentionDays)
$bag.AddValue('PerfDailyDaysExpected',$PerfDailyDays)

# Check State Raw Retention
$StateRawRow = $Rows | where {$_.DatasetName -eq "State data set" -and $_.AggregationType -eq "Raw"}
[int]$StateRawRetentionDays = $StateRawRow.RetentionDays
IF (!($StateRawRetentionDays -eq $StateRawDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('StateRawDaysRetained',$StateRawRetentionDays)
$bag.AddValue('StateRawDaysExpected',$StateRawDays)

# Check State Hourly Retention
$StateHourlyRow = $Rows | where {$_.DatasetName -eq "State data set" -and $_.AggregationType -eq "Hourly"}
[int]$StateHourlyRetentionDays = $StateHourlyRow.RetentionDays
IF (!($StateHourlyRetentionDays -eq $StateHourlyDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('StateHourlyDaysRetained',$StateHourlyRetentionDays)
$bag.AddValue('StateHourlyDaysExpected',$StateHourlyDays)

# Check State Daily Retention
$StateDailyRow = $Rows | where {$_.DatasetName -eq "State data set" -and $_.AggregationType -eq "Daily"}
[int]$StateDailyRetentionDays = $StateDailyRow.RetentionDays
IF (!($StateDailyRetentionDays -eq $StateDailyDays))
{
  $FinalResult = "BadCondition"
}
$bag.AddValue('StateDailyDaysRetained',$StateDailyRetentionDays)
$bag.AddValue('StateDailyDaysExpected',$StateDailyDays)

#Add final result to PropertyBag
$bag.AddValue('Result',$FinalResult)

#Log Event with monitor outputs
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Results: ($FinalResult). `n AlertDaysRetained: ($AlertRetentionDays) `n AlertDaysExpected: ($AlertDays) `n EventDaysRetained: ($EventRetentionDays) `n EventDaysExpected: ($EventDays) `n PerfRawDaysRetained: ($PerfRawRetentionDays) `n PerfRawDaysExpected: ($PerfRawDays) `n PerfHourlyDaysRetained: ($PerfHourlyRetentionDays) `n PerfHourlyDaysExpected: ($PerfHourlyDays) `n PerfDailyDaysRetained: ($PerfDailyRetentionDays) `n PerfDailyDaysExpected: ($PerfDailyDays) `n StateRawDaysRetained: ($StateRawRetentionDays) `n StateRawDaysExpected: ($StateRawDays) `n StateHourlyDaysRetained: ($StateHourlyRetentionDays) `n StateHourlyDaysExpected: ($StateHourlyDays) `n StateDailyDaysRetained: ($StateDailyRetentionDays) `n StateDailyDaysExpected: ($StateDailyDays)")

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>AlertDays</Name>
                    <Value>$Config/AlertDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>EventDays</Name>
                    <Value>$Config/EventDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>PerfRawDays</Name>
                    <Value>$Config/PerfRawDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>PerfHourlyDays</Name>
                    <Value>$Config/PerfHourlyDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>PerfDailyDays</Name>
                    <Value>$Config/PerfDailyDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>StateRawDays</Name>
                    <Value>$Config/StateRawDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>StateHourlyDays</Name>
                    <Value>$Config/StateHourlyDays$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>StateDailyDays</Name>
                    <Value>$Config/StateDailyDays$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  SCOM UserRoles Monitoring Script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.DataSource.ps1"
$EventID = "6606"

#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Connect to local SCOM Management Group Section
#=================================================================================
# I have found this to be the most reliable method to load SCOM modules for scripts running on Management Servers
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Unable to load OperationsManager module or unable to connect to Management Server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
$SCOMAdminRole = Get-SCOMUserRole | where {$_.Name -eq "OperationsManagerAdministrators"}
$SCOMAdmins = $SCOMAdminRole.Users

IF ($SCOMAdmins -contains "BUILTIN\Administrators")
{
  #This is bad.
  $bag.AddValue('Result','BadCondition')
  $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n The OperationsManager Administrators Role contains the default BUILTIN\Administrators. `n Role contains: ($SCOMAdmins).")
}
ELSE
{
  #Assume Good.  
  $bag.AddValue('Result','GoodCondition')
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n The OperationsManager Administrators Role does not contain the default BUILTIN\Administrators. `n Role contains: ($SCOMAdmins).")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.TempDBOptimized.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.TempDBOptimized.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  TempDB Optimized Monitoring Script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.TempDBOptimized.Monitor.DataSource.ps1"
$EventID = "6605"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get SQLServer from Registry
$SCOMKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$SQLServer = (Get-ItemProperty $SCOMKey).DatabaseServerName
$SQLDBName = (Get-ItemProperty $SCOMKey).DatabaseName
$SQLQuery1 = "USE tempdb; SELECT name, physical_name FROM sys.database_files WHERE NOT data_space_id=0"


#Log event for captured parameters
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n SQLServer: ($SQLServer) `n SQLDatabase: ($SQLDBName).")

# Connect to and then Query the database
$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
$SqlConnection.ConnectionString = "Server=$SQLServer;Database=$SQLDBName;Integrated Security=True"
$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
$SqlCmd.CommandText = $SqlQuery1
$SqlCmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$ds = New-Object System.Data.DataSet
$SqlAdapter.Fill($ds) | Out-Null
#Close the SQL Connection
$SqlConnection.Close()

# Check for errors connecting to SQL
IF ($Error)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an attempting to connect to and query SQL. `n Terminating script. `n Error is: ($Error).")
  EXIT  
}

# Set the output to a variable
[array]$Rows = $ds.Tables[0]
[int]$RowsCount = $Rows.Count

IF (!($RowsCount -ge 1))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an error getting records from SQL or no records were returned. `n Number of objects returned: ($RowsCount). `n Terminating script.")
  EXIT
}

[int]$TempDBFileCount = $RowsCount

$bag.AddValue('TempDBFileCount',$TempDBFileCount)

IF ($TempDBFileCount -gt 8)
{
  #This is bad. Throw bag that the tempDB file count is greater than 8 files
  $bag.AddValue('Result','BadCondition')
  $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n TempDB should not have more than 8 files. `n TempDBFileCount: ($TempDBFileCount).")
}
ELSEIF ($TempDBFileCount -eq 1)
{
  # Bad. The tempDB file count is 1. The tempDB is not optimized for a multi CPU server
  $bag.AddValue('Result','BadCondition')
  $momapi.LogScriptEvent($ScriptName,$EventID,2,"`n TempDB database is a single file. TempDB should have the same number of files as logical CPUs. `n TempDBFileCount: ($TempDBFileCount).")
}
ELSE
{
  #Assume Good.  TempDB filecount is greater than 1 and less than 8
  $bag.AddValue('Result','GoodCondition')
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n TempDB file count is ($TempDBFileCount). `n TempDB should have the same number of files as logical CPUs.")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.OpsDBandLogSize.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinDBSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinLogSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="MinDBSizeMB" Selector="$Config/MinDBSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="MinLogSizeMB" Selector="$Config/MinLogSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.OpsDBandLogSize.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Ops DB and Log Size Monitoring Script
#
#  Author: Kevin Holman
#  v1.1
#=================================================================================
param([int]$MinDBSizeMB,[int]$MinLogSizeMB)

# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# [int]$MinDBSizeMB = 30000
# [int]$MinLogSizeMB = 15000
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.OpsDBandLogSize.Monitor.DataSource.ps1"
$EventID = "6604"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get SQLServer from Registry
$SCOMKey = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$SQLServer = (Get-ItemProperty $SCOMKey).DatabaseServerName
$SQLDBName = (Get-ItemProperty $SCOMKey).DatabaseName
$SQLQuery1 = "Select sum((size*8)/1024) From sys.database_files where name = 'MOM_DATA'"
$SQLQuery2 = "Select sum((size*8)/1024) From sys.database_files where name = 'MOM_LOG'"

#Log event for captured parameters
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n SQLServer: ($SQLServer) `n SQLDatabase: ($SQLDBName).")

# Connect to and then Query the database
$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
$SqlConnection.ConnectionString = "Server=$SQLServer;Database=$SQLDBName;Integrated Security=True"
$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
$SqlCmd.CommandText = $SqlQuery1
$SqlCmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$ds = New-Object System.Data.DataSet
$SqlAdapter.Fill($ds) | Out-Null

# Check for errors connecting to SQL
IF ($Error)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an attempting to connect to and query SQL. `n Terminating script. `n Error is: ($Error).")
  EXIT  
}

# Set the output to a variable
[array]$Rows = $ds.Tables[0]
$RowsCount = $Rows.Count

IF (!($RowsCount -eq 1))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an error getting records from SQL or no records were returned. `n Number of objects returned: ($RowsCount). `n Terminating script.")
  EXIT
}

[int]$DBSizeMB = $Rows.Column1

$SqlCmd.CommandText = $SqlQuery2
$SqlCmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$ds = New-Object System.Data.DataSet
$SqlAdapter.Fill($ds) | Out-Null

# Check for errors connecting to SQL
IF ($Error)
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an attempting to connect to and query SQL. `n Terminating script. `n Error is: ($Error).")
  EXIT  
}

# Set the output to a variable
[array]$Rows = $ds.Tables[0]
$RowsCount = $Rows.Count

IF (!($RowsCount -eq 1))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR:  There was an error getting records from SQL or no records were returned. `n Number of objects returned: ($RowsCount). `n Terminating script.")
  EXIT
}

[int]$LogSizeMB = $Rows.Column1

#Close the SQL Connection
$SqlConnection.Close()

$bag.AddValue('DBSizeMB',$DBSizeMB)
$bag.AddValue('MinDBSizeThreshold',$MinDBSizeMB)
$bag.AddValue('LogSizeMB',$LogSizeMB)
$bag.AddValue('MinLogSizeThreshold',$MinLogSizeMB)

IF ($DBSizeMB -lt $MinDBSizeMB)
{
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('DBSize','TooSmall')
}
ELSEIF ($LogSizeMB -lt $MinLogSizeMB)
{
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('LogSize','TooSmall')
}
ELSE
{
  $bag.AddValue('Result','GoodCondition')
}

# Return all bags
$bag

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n OpsMgr DB Size in MB: ($DBSizeMB). `n Threshold is ($MinDBSizeMB). `n Logfile size: ($LogSizeMB). `n Threshold is ($MinLogSizeMB)")
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script								
                                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>MinDBSizeMB</Name>
                    <Value>$Config/MinDBSizeMB$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>MinLogSizeMB</Name>
                    <Value>$Config/MinLogSizeMB$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.EventLogSize.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinimumSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="MinimumSizeMB" Selector="$Config/MinimumSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.EventLogSize.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Event Log Size Monitoring Script
#
#  Author: Kevin Holman
#  v1.1
#=================================================================================
param([int]$MinimumSizeMB)

# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# [int]$MinimumSizeMB = 60
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.EventLogSize.Monitor.DataSource.ps1"
$EventID = "6603"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Multiply times 1000 to convert MB parameter to Kb
[int]$MinimumSizeKb = ($MinimumSizeMB * 1000)

$OpsMgrLog = Get-EventLog -List | where {$_.Log -eq "Operations Manager"}
[int]$OpsMgrLogSizeKb = $OpsMgrLog.MaximumKilobytes

#Add PropertyBags
$bag.AddValue('LogSizeKb',$OpsMgrLogSizeKb)
$bag.AddValue('MinimumLogSizeKb',$MinimumSizeKb)

IF ($OpsMgrLogSizeKb -lt $MinimumSizeKb)
{
  $bag.AddValue('Result','BadCondition')
}
ELSE
{
  $bag.AddValue('Result','GoodCondition')
}

# Return all bags
$bag

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n OpsMgr Event Log Size is ($OpsMgrLogSizeKb) kb. `n Minimum Log Size expected: ($MinimumSizeKb) kb.")
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
								</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>MinimumSizeMB</Name>
                    <Value>$Config/MinimumSizeMB$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.AgentProxyDefaultCheck.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.AgentProxyDefaultCheck.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Get Agent Proxy Default Monitoring Script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.AgentProxyDefaultCheck.Monitor.DataSource.ps1"
$EventID = "6601"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
add-pssnapin "Microsoft.EnterpriseManagement.OperationsManager.Client";
new-managementGroupConnection -ConnectionString:localhost;
set-location "OperationsManagerMonitoring::";
$ProxySettings = Get-DefaultSetting | Where {$_.Name -eq "HealthService\ProxyingEnabled"}
$ProxySettingsValue = $ProxySettings.Value

IF ($ProxySettingsValue -eq "True")
{
$bag.AddValue('Result','GoodCondition')
}
ELSE
{
$bag.AddValue('Result','BadCondition')
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Default Agent Proxy Enabled Value: ($ProxySettingsValue). `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.ResourcePoolObserverCheck.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="PoolName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.ResourcePoolObserverCheck.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Resource Pool Default Observer Monitoring Script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param($PoolName)

# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#$PoolName = "All Management Servers Resource Pool"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.ResourcePoolObserverCheck.Monitor.DataSource.ps1"
$EventID = "6608"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting for Resource Pool: ($PoolName). `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Connect to local SCOM Management Group Section - If required
#=================================================================================
# I have found this to be the most reliable method to load SCOM modules for scripts running on Management Servers
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Unable to load OperationsManager module or unable to connect to Management Server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get Resource Pools
$Pool = Get-SCOMResourcePool -DisplayName $PoolName

#Get Members of the pool
$PoolMembers = $Pool.Members
$PoolMembersCount = $PoolMembers.Count

#Get Default Observer setting
$PoolDOCondition = $Pool.UseDefaultObserver
  
#Check if pool member count is equal to 3 or 5 plus.  If so check DO condition
IF ($PoolMembersCount -eq 3 -or $PoolMembersCount -ge 5)
{
  #Pool should NOT use DO
  IF ($PoolDOCondition -eq $True)
  {
    #This is bad
    $bag.AddValue('Result','BadCondition')
  }
  ELSE
  {
    #This is good
    $bag.AddValue('Result','GoodCondition')
  }
}
ELSE
{
  #Pool should use DO
  IF ($PoolDOCondition -eq $False)
  {
    #This is bad  
    $bag.AddValue('Result','BadCondition')
  }
  ELSE
  {
    #This is good
    $bag.AddValue('Result','GoodCondition')
  }  
}
#Add MemberCount and DO setting to PropertyBag output for Health Explorer
$bag.AddValue('PoolMembersCount',$PoolMembersCount)
$bag.AddValue('DefaultObserverEnabled',$PoolDOCondition)

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Pool: ($PoolName) has ($PoolMembersCount) members and Default Observer is ($PoolDOCondition). `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
								</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>PoolName</Name>
                    <Value>$Config/PoolName$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.LicenseCheck.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.LicenseCheck.Monitor.DataSource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Get SCOM License Monitoring Script
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "SCOM.Health.LicenseCheck.Monitor.DataSource.ps1"
$EventID = "6602"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Connect to local SCOM Management Group Section - If required
#=================================================================================
# I have found this to be the most reliable method to load SCOM modules for scripts running on Management Servers
# Clear any previous errors
$Error.Clear()
# Import the OperationsManager module and connect to the management group
$SCOMPowerShellKey = "HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Powershell\V2"
$SCOMModulePath = Join-Path (Get-ItemProperty $SCOMPowerShellKey).InstallDirectory "OperationsManager"
Import-module $SCOMModulePath
New-DefaultManagementGroupConnection "localhost"
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Unable to load OperationsManager module or unable to connect to Management Server. `n Terminating script. `n Error is: ($Error).")
  EXIT
}
#=================================================================================


# Begin MAIN script section
#=================================================================================
$License = Get-SCOMManagementGroup
$LicenseResult = $License.SkuForLicense

IF ($LicenseResult -eq "Retail")
{
$bag.AddValue('Result','GoodCondition')
}
ELSE
{
$bag.AddValue('Result','BadCondition')
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n License Result: ($LicenseResult). `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.HealthServiceStoreSize.FileSize.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="FileSizeThresholdMB" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="FileSizeThresholdMB" Selector="$Config/FileSizeThresholdMB$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="SCH" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime />
              </DataSource>
              <ProbeAction ID="Probe" TypeID="SCOM.Health.HealthServiceStoreSize.FileSize.ProbeAction">
                <FileSizeThresholdMB>$Config/FileSizeThresholdMB$</FileSizeThresholdMB>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe">
                <Node ID="SCH" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SCOM.Health.ConfigFileAge.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:integer" name="SpreadInitializationOverInterval" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MaxFileAgeHours" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SpreadInitializationOverInterval" Selector="$Config/SpreadInitializationOverInterval$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="MaxFileAgeHours" Selector="$Config/MaxFileAgeHours$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SpreadInitializationOverInterval Unit="Seconds">$Config/SpreadInitializationOverInterval$</SpreadInitializationOverInterval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SCOM.Health.ConfigFileAge.Datasource.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Check SCOM Config File Age
#
#  Author: Kevin Holman
#
#  v1.0
#=================================================================================
param([string]$MGName,[int]$MaxFileAgeHours)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# [string]$MGName = "OM"
# [int]$MaxFileAgeHours = 240
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "SCOM.Health.ConfigFileAge.Datasource.ps1"
$EventID = "6009"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

# Get SCOM Agent Path Section
$SCOMRegKey = "HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters"
$SCOMAgentPath = (Get-ItemProperty $SCOMRegKey)."State Directory"

$SCOMAgentConfigFilePath = $SCOMAgentPath + "\Connector Configuration Cache\" + $MGName + "\OpsMgrConnector.Config.xml"

IF (Test-Path $SCOMAgentConfigFilePath)
{
  $SCOMAgentConfigFile = Get-Item $SCOMAgentConfigFilePath
  $LastWriteTime = $SCOMAgentConfigFile.LastWriteTime
  $Now = Get-Date
  [int]$FileAgeHours = ($Now - $LastWriteTime).Hours

  IF ($FileAgeHours -gt $MaxFileAgeHours)
  {
    $bag.AddValue("Result","BAD")
    $bag.AddValue("Message","File Age is Older Than Threshold")
    $bag.AddValue("FileAgeHours",$FileAgeHours)
    $bag.AddValue("ThresholdHours",$MaxFileAgeHours) 
  }
  ELSE
  {
    $bag.AddValue("Result","GOOD")
    $bag.AddValue("Message","File Age is Under Threshold")
    $bag.AddValue("FileAgeHours",$FileAgeHours)
    $bag.AddValue("ThresholdHours",$MaxFileAgeHours)   
  }
}
ELSE
{
  #Log script event that we cannot find config file
  $Message = "`nCannot find config file at path ($SCOMAgentConfigFilePath)."
  $momapi.LogScriptEvent($ScriptName,$EventID,2,$Message)
  $bag.AddValue("Result","BAD")
  $bag.AddValue("Message",$Message)
  $bag.AddValue("PathTested",$SCOMAgentConfigFilePath)
  $bag.AddValue("FileAgeHours","Unknown")
  $bag.AddValue("ThresholdHours",$MaxFileAgeHours)
}
# Return all bags
$bag
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript Completed. `nScript Runtime: ($ScriptTime) seconds. `nFileAgeHours: ($FileAgeHours) `nMax File Age Threshold in Hours: ($MaxFileAgeHours) `nManagement Group: ($MGName).")
#=================================================================================
# End of script
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>MGName</Name>
                    <Value>$Target/ManagementGroup/Name$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>MaxFileAgeHours</Name>
                    <Value>$Config/MaxFileAgeHours$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="SCOM.Health.HealthServiceStoreSize.FileSize.ProbeAction" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="FileSizeThresholdMB" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="FileSizeThresholdMB" Selector="$Config/FileSizeThresholdMB$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>HealthServiceStoreFileSize.ps1</ScriptName>
                <ScriptBody>#=================================================================================
#  Script to gather the file size of the Health Service EDB store
#
#  Author: Jimmy Harper
#  Modified by: Kevin Holman
#  v1.0
#=================================================================================
param([int]$FileSizeThresholdMB)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# [int]$FileSizeThresholdMB = "100"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "SCOM.Health.HealthServiceStoreSize.FileSize.ProbeAction.ps1"
$EventID = "6010"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Get Health Service store location from registry
$HSStoreLocation = Get-ItemProperty "HKLM:\System\CurrentControlSet\Services\HealthService\Parameters" -Name "State Directory"
$HSStoreFile = $HSStoreLocation.'State Directory' + "\Health Service Store\HealthServiceStore.edb"

#Get Health Service store size
$HSStoreFileSizeMB = [math]::truncate((get-item $HSStoreFile).Length / 1mb)

#If Health Service Store size is greater than threshold, set Status=Unhealthy (otherwise set Status=Healthy)
IF ($HSStoreFileSizeMB -gt $FileSizeThresholdMB)
{
    $Status="OverThreshold"
}
ELSE
{
    $Status="UnderThreshold"
}
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n HealthService Store FileSize: ($HSStoreFileSizeMB). `n Threshold: ($FileSizeThresholdMB). `n Status: ($Status). `n File location: ($HSStoreFile).")
#=================================================================================
# End MAIN script section


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
$bag.AddValue("Health Service Store Location",$HSStoreFile)
$bag.AddValue("Health Service Store Size MB",$HSStoreFileSizeMB)
$bag.AddValue("Threshold MB",$FileSizeThresholdMB)
$bag.AddValue("Status",$Status)

# Return all bags
$bag
#=================================================================================


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
            </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>FileSizeThresholdMB</Name>
                    <Value>$Config/FileSizeThresholdMB$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>30</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <WriteActionModuleType ID="SCOM.Health.ConfigureRegistryValue.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="RegKeyPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegValueName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SCOM.Health.ConfigureRegistryValue.WA.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Set Registry Value
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param($RegKeyPath,$RegValueName,$RegValue)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $RegKeyPath = "HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse"
# $RegValueName = "Deployment Command Timeout Seconds"
# $RegValue = "86400"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "SCOM.Health.ConfigureRegistryValue.WA.ps1"
$EventID = "6609"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting for Creating/Setting registry value of ($RegValue) for ($RegValueName) at ($RegKeyPath). `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
# Check to see if Key exists.  If not then create Key
IF (!(Test-Path $RegKeyPath))
{
  Write-Host "Reg Key does not exist at ($RegKeyPath).  Creating Key."
  New-Item -Path $RegKeyPath | Out-Null
}

#Set the registry Value
Write-Host Creating/Setting registry value of ($RegValue) for ($RegValueName) at ($RegKeyPath)
Set-ItemProperty -Path $RegKeyPath -Name $RegValueName -Value $RegValue -Type DWord
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
						</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>RegKeyPath</Name>
                    <Value>$Config/RegKeyPath$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>RegValueName</Name>
                    <Value>$Config/RegValueName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>RegValue</Name>
                    <Value>$Config/RegValue$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="SCOM.Health.ConfigureEventLogSize.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>SCOM.Health.ConfigureEventLogSize.WA.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Set Event Log Size on Management Servers
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "SCOM.Health.ConfigureEventLogSize.WA.ps1"
$EventID = "6610"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set Event Log to 60MB
Limit-EventLog -LogName 'Operations Manager' -MaximumSize 60MB

$OpsMgrLog = Get-EventLog -List | where {$_.Log -eq "Operations Manager"}
[int]$OpsMgrLogSizeKb = $OpsMgrLog.MaximumKilobytes

Write-Host "OperationsManager log was set to: ("$OpsMgrLogSizeKb" ) KB"
#=================================================================================
# End MAIN script section


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
						</ScriptBody>
                <Parameters />
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.StateQueueItems.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>StateQueueItems</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Services\HealthService\Parameters\State Queue Items</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/StateQueueItems</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/StateQueueItems</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>PersistenceCheckpointDepthMaximum</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Persistence Checkpoint Depth Maximum</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PersistenceCheckpointDepthMaximum</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/PersistenceCheckpointDepthMaximum</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.DALInitiateClearPool.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>DALInitiateClearPool</AttributeName>
                  <Path>SOFTWARE\Microsoft\System Center\2010\Common\DAL\DALInitiateClearPool</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DALInitiateClearPool</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DALInitiateClearPool</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>DALInitiateClearPoolSeconds</AttributeName>
                  <Path>SOFTWARE\Microsoft\System Center\2010\Common\DAL\DALInitiateClearPoolSeconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DALInitiateClearPoolSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DALInitiateClearPoolSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>GroupCalcPollingIntervalMilliseconds</AttributeName>
                  <Path>SOFTWARE\Microsoft\System Center\2010\Common\GroupCalcPollingIntervalMilliseconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/GroupCalcPollingIntervalMilliseconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/GroupCalcPollingIntervalMilliseconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>CommandTimeoutSeconds</AttributeName>
                  <Path>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\Command Timeout Seconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/CommandTimeoutSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/CommandTimeoutSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueMatch" NoDetection="false" />
          <MonitorTypeState ID="RegValueDoesNotMatch" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="RegistryValue" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="RegistryValue" Selector="$Config/RegistryValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>DeploymentCommandTimeoutSeconds</AttributeName>
                  <Path>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\Deployment Command Timeout Seconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>1</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DeploymentCommandTimeoutSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/DeploymentCommandTimeoutSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">$Config/RegistryValue$</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueMatch">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueDoesNotMatch">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueExists" NoDetection="false" />
          <MonitorTypeState ID="RegValueMissing" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>PoolLeaseRequestPeriodSeconds</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Services\HealthService\Parameters\PoolManager\PoolLeaseRequestPeriodSeconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>0</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDExists" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/PoolLeaseRequestPeriodSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">true</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDMissing" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/PoolLeaseRequestPeriodSeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">false</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueExists">
              <Node ID="CDExists">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueMissing">
              <Node ID="CDMissing">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueExists" NoDetection="false" />
          <MonitorTypeState ID="RegValueMissing" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>PoolNetworkLatencySeconds</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Services\HealthService\Parameters\PoolManager\PoolNetworkLatencySeconds</Path>
                  <PathType>1</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>0</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDExists" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/PoolNetworkLatencySeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">true</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDMissing" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/PoolNetworkLatencySeconds</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">false</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueExists">
              <Node ID="CDExists">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueMissing">
              <Node ID="CDMissing">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.LicenseCheck.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.LicenseCheck.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.AgentProxyDefaultCheck.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.AgentProxyDefaultCheck.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.ResourcePoolObserverCheck.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:string" name="PoolName" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.ResourcePoolObserverCheck.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              <PoolName>$Config/PoolName$</PoolName>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.EventLogSize.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinimumSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="MinimumSizeMB" Selector="$Config/MinimumSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.EventLogSize.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <MinimumSizeMB>$Config/MinimumSizeMB$</MinimumSizeMB>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.OpsDBandLogSize.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinDBSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="MinLogSizeMB" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="MinDBSizeMB" Selector="$Config/MinDBSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="MinLogSizeMB" Selector="$Config/MinLogSizeMB$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.OpsDBandLogSize.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <MinDBSizeMB>$Config/MinDBSizeMB$</MinDBSizeMB>
              <MinLogSizeMB>$Config/MinLogSizeMB$</MinLogSizeMB>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.TempDBOptimized.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.TempDBOptimized.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.DWRetentionConfigured.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="AlertDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="EventDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfRawDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfHourlyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="PerfDailyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateRawDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateHourlyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="StateDailyDays" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="AlertDays" Selector="$Config/AlertDays$" ParameterType="int" />
          <OverrideableParameter ID="EventDays" Selector="$Config/EventDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfRawDays" Selector="$Config/PerfRawDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfHourlyDays" Selector="$Config/PerfHourlyDays$" ParameterType="int" />
          <OverrideableParameter ID="PerfDailyDays" Selector="$Config/PerfDailyDays$" ParameterType="int" />
          <OverrideableParameter ID="StateRawDays" Selector="$Config/StateRawDays$" ParameterType="int" />
          <OverrideableParameter ID="StateHourlyDays" Selector="$Config/StateHourlyDays$" ParameterType="int" />
          <OverrideableParameter ID="StateDailyDays" Selector="$Config/StateDailyDays$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="SCOM.Health.DWRetentionConfigured.Monitor.DataSource">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <AlertDays>$Config/AlertDays$</AlertDays>
              <EventDays>$Config/EventDays$</EventDays>
              <PerfRawDays>$Config/PerfRawDays$</PerfRawDays>
              <PerfHourlyDays>$Config/PerfHourlyDays$</PerfHourlyDays>
              <PerfDailyDays>$Config/PerfDailyDays$</PerfDailyDays>
              <StateRawDays>$Config/StateRawDays$</StateRawDays>
              <StateHourlyDays>$Config/StateHourlyDays$</StateHourlyDays>
              <StateDailyDays>$Config/StateDailyDays$</StateDailyDays>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SCOM.Health.RegKeyExists.AgentOnManagementServer.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegExists" NoDetection="false" />
          <MonitorTypeState ID="RegMissing" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>AgentOnManagementServer</AttributeName>
                  <Path>SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups</Path>
                  <PathType>0</PathType>
                  <!-- 0=regKey 1=regValue -->
                  <AttributeType>0</AttributeType>
                  <!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>$Config/IntervalSeconds$</Frequency>
            </DataSource>
            <ConditionDetection ID="CDExists" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/AgentOnManagementServer</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">true</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDMissing" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Boolean">Values/AgentOnManagementServer</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Boolean">false</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegExists">
              <Node ID="CDExists">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegMissing">
              <Node ID="CDMissing">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="SCOM.Health.ConfigFileAge.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SCOM.Health.ConfigFileAge.Datasource">
            <IntervalSeconds>86400</IntervalSeconds>
            <SpreadInitializationOverInterval>14400</SpreadInitializationOverInterval>
            <TimeoutSeconds>120</TimeoutSeconds>
            <MaxFileAgeHours>240</MaxFileAgeHours>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.ExpressionFilter">
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">BAD</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="SCOM.Health.ConfigFileAge.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Result']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='FileAgeHours']$</AlertParameter3>
              <AlertParameter4>$Data/Property[@Name='ThresholdHours']$</AlertParameter4>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SCOM.Health.HealthServiceStoreSize.FileSize.Collection.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SCOM.Health.HealthServiceStoreSize.FileSize.DataSource">
            <IntervalSeconds>3600</IntervalSeconds>
            <FileSizeThresholdMB>200</FileSizeThresholdMB>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="Performance!System.Performance.DataGenericMapper">
          <ObjectName>Health Service Store</ObjectName>
          <CounterName>File Size</CounterName>
          <InstanceName>_Total</InstanceName>
          <Value>$Data/Property[@Name='Health Service Store Size MB']$</Value>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="WriteToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="SCOM.Health.HealthServiceStoreSize.OfflineDefrag.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.ScriptProbeAction">
          <ScriptName>HSOfflineDefrag.vbs</ScriptName>
          <Arguments />
          <ScriptBody>dim objWMIService, objProcess, strCommand
dim oShell, oShellEnv, strShell, computerName, oAPI

'''''''''''''''''''''''''''
'''get Health Service State directory from registry
on error resume next
const HKEY_LOCAL_MACHINE = &amp;H80000002
strComputer = "."
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp; strComputer &amp; "\root\default:StdRegProv")
strKeyPath = "SYSTEM\CurrentControlSet\Services\HealthService\Parameters"
strHSStateDir = "State Directory"
oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strHSStateDir,HSStateDir
HSStateDir = HSStateDir &amp; "\Health Service Store\HealthServiceStore.edb"
wscript.echo "HS State Path: " &amp; HSStateDir
'''''''''''''''''''''''''''

''Matt Taylor's code to restart Health Service (added commands for offline defrag

Set oShell = WScript.CreateObject("WScript.Shell")
Set oAPI = CreateObject("MOM.ScriptAPI")


set oShellEnv = oShell.Environment("Process")
computerName = oShellEnv("ComputerName")

strCommand = "cmd /c net stop healthservice &amp; cmd /c esentutl /d" &amp; " """ &amp; HSStateDir &amp; """ " &amp; "&amp; cmd /c net start healthservice"
wscript.echo strCommand
Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")

Call oAPI.LogScriptEvent("HSOfflineDefrag.vbs", 1001, 4, "Attempting to stop Health Service, do an offline defrag, and restart the Health Service")

Set objProcess = objWMIService.Get("Win32_Process")
Set objProgram = objProcess.Methods_( _
"Create").InParameters.SpawnInstance_
objProgram.CommandLine = strCommand

Set strShell = objWMIService.ExecMethod( _
"Win32_Process", "Create", objProgram)

WScript.echo "Restarted SCOM Health Service on " &amp; computerName
</ScriptBody>
          <TimeoutSeconds>300</TimeoutSeconds>
        </ProbeAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="SCOM.Health.AgentProxyDefaultCheck.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.AgentProxyDefaultCheck.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.AgentProxyDefaultCheck.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.DWRetentionConfigured.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.DWRetentionConfigured.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.DWRetentionConfigured.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <AlertDays>180</AlertDays>
          <EventDays>10</EventDays>
          <PerfRawDays>10</PerfRawDays>
          <PerfHourlyDays>180</PerfHourlyDays>
          <PerfDailyDays>365</PerfDailyDays>
          <StateRawDays>90</StateRawDays>
          <StateHourlyDays>90</StateHourlyDays>
          <StateDailyDays>180</StateDailyDays>
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.EventLogSize.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.EventLogSize.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.EventLogSize.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <MinimumSizeMB>60</MinimumSizeMB>
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.LicenseCheck.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.LicenseCheck.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.LicenseCheck.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.OpsDBandLogSize.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.OpsMgrDBWatcher" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.OpsDBandLogSize.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.OpsDBandLogSize.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <MinDBSizeMB>50000</MinDBSizeMB>
          <MinLogSizeMB>25000</MinLogSizeMB>
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegKeyExists.AgentOnManagementServer.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegMissing" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegExists" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>1800</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.DALInitiateClearPool.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>1</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>60</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>86400</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>1800000</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>104857600</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueContent.StateQueueItems.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueContent.StateQueueItems.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueContent.StateQueueItems.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMatch" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueDoesNotMatch" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
          <RegistryValue>20480</RegistryValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMissing" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueExists" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.MonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Success" MonitorTypeStateID="RegValueMissing" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="RegValueExists" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>14400</IntervalSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.ResourcePoolObserverCheck.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementServicePoolWatcher" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.ResourcePoolObserverCheck.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.ResourcePoolObserverCheck.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <PoolName>$Target/Property[Type='SC!Microsoft.SystemCenter.ManagementServicePoolWatcher']/PoolName$</PoolName>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SCOM.Health.TempDBOptimized.Monitor" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.ManagementGroup" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="SCOM.Health.TempDBOptimized.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="SCOM.Health.TempDBOptimized.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="SCOM.Health.CommandTimeoutSeconds.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse</RegKeyPath>
          <RegValueName>Command Timeout Seconds</RegValueName>
          <RegValue>1800</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.DALInitiateClearPool.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SOFTWARE\Microsoft\System Center\2010\Common\DAL</RegKeyPath>
          <RegValueName>DALInitiateClearPool</RegValueName>
          <RegValue>1</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.DALInitiateClearPoolSeconds.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SOFTWARE\Microsoft\System Center\2010\Common\DAL</RegKeyPath>
          <RegValueName>DALInitiateClearPoolSeconds</RegValueName>
          <RegValue>60</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.DeploymentCommandTimeoutSeconds.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse</RegKeyPath>
          <RegValueName>Deployment Command Timeout Seconds</RegValueName>
          <RegValue>86400</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.GroupCalcPollingIntervalMilliseconds.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SOFTWARE\Microsoft\System Center\2010\Common</RegKeyPath>
          <RegValueName>GroupCalcPollingIntervalMilliseconds</RegValueName>
          <RegValue>1800000</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.PersistenceCheckpointDepthMaximum.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters</RegKeyPath>
          <RegValueName>Persistence Checkpoint Depth Maximum</RegValueName>
          <RegValue>104857600</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.StateQueueItems.Registry.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.RegValueContent.StateQueueItems.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureRegistryValue.WA">
          <RegKeyPath>HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters</RegKeyPath>
          <RegValueName>State Queue Items</RegValueName>
          <RegValue>20480</RegValue>
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
      <Recovery ID="SCOM.Health.EventLogSize.Recovery" Accessibility="Public" Enabled="false" Target="SC!Microsoft.SystemCenter.CollectionManagementServer" Monitor="SCOM.Health.EventLogSize.Monitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="60">
        <Category>Custom</Category>
        <WriteAction ID="WA" TypeID="SCOM.Health.ConfigureEventLogSize.WA">
          <TimeoutSeconds>60</TimeoutSeconds>
        </WriteAction>
      </Recovery>
    </Recoveries>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="SCOM.Health.HealthServiceStoreSize.FileSize.Perf.View" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.Agent" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <RuleList>
            <Rule>9d7fbe27-d530-611c-e5a2-6a10348fefa9</Rule>
          </RuleList>
        </Criteria>
        <Presentation>
          <SortedColumnIndex>0</SortedColumnIndex>
          <SortOrder>0</SortOrder>
          <StartTime>2018-01-24T12:21:51.4621409-06:00</StartTime>
          <EndTime>2018-01-25T12:21:51.4621409-06:00</EndTime>
          <DynamicTimeTicks>864000000000</DynamicTimeTicks>
          <IsDynamic>true</IsDynamic>
          <Is3DMode>false</Is3DMode>
          <ShowAlerts>false</ShowAlerts>
          <ShowMaintenanceMode>false</ShowMaintenanceMode>
          <BaselineMode>false</BaselineMode>
          <ShowPointLabels>false</ShowPointLabels>
          <EnableSmartLabels>true</EnableSmartLabels>
          <RightAngleAxes>false</RightAngleAxes>
          <ClusterSeries>false</ClusterSeries>
          <Title />
          <TitleFont>Microsoft Sans Serif,12,Regular</TitleFont>
          <ChartFont>Microsoft Sans Serif,8.25,Regular</ChartFont>
          <ShowBands>false</ShowBands>
          <BandColor>-1579033</BandColor>
          <ChartType>Line</ChartType>
          <Depth>100</Depth>
          <GapDepth>100</GapDepth>
          <Perspective>10</Perspective>
          <GraphXRotation>0</GraphXRotation>
          <GraphYRotation>0</GraphYRotation>
          <XLabelAngle>0</XLabelAngle>
          <LabelColor>-16777216</LabelColor>
          <LabelFont>Microsoft Sans Serif,8.25,Regular</LabelFont>
          <XAxisVisible>True</XAxisVisible>
          <XShowMajorGridlines>false</XShowMajorGridlines>
          <XShowMinorGridlines>false</XShowMinorGridlines>
          <ShowInterlaceStrips>false</ShowInterlaceStrips>
          <XInterlaceColor>16777215</XInterlaceColor>
          <XShowSideMargin>true</XShowSideMargin>
          <XAxisFont>Microsoft Sans Serif,8.25,Regular</XAxisFont>
          <AutoAxis>true</AutoAxis>
          <AxisMax>100</AxisMax>
          <AxisMin>0</AxisMin>
          <YAxisVisible>True</YAxisVisible>
          <YShowMajorGridlines>true</YShowMajorGridlines>
          <YShowMinorGridlines>false</YShowMinorGridlines>
          <YShowInterlaceStrips>false</YShowInterlaceStrips>
          <YShowSideMargin>true</YShowSideMargin>
          <YAxisFont>Microsoft Sans Serif,8.25,Regular</YAxisFont>
          <BackgroundColor1>-1</BackgroundColor1>
          <BackgroundColor2>-1</BackgroundColor2>
          <GradientType>None</GradientType>
          <Series />
        </Presentation>
        <Target />
      </View>
    </Views>
    <Folders>
      <Folder ID="SCOM.Health.RootFolder" Accessibility="Internal" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="SCOM.Health.HealthServiceStoreSize.FileSize.Perf.View" ID="SCOM.Health.HealthServiceStoreSize.FileSize.Perf.View.FolderItem" Folder="SCOM.Health.RootFolder" />
    </FolderItems>
    <StringResources>
      <StringResource ID="SCOM.Health.RegValueContent.StateQueueItems.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.LicenseCheck.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.AgentProxyDefaultCheck.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.EventLogSize.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.OpsDBandLogSize.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.TempDBOptimized.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.DWRetentionConfigured.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.ResourcePoolObserverCheck.Monitor.AlertMessage" />
      <StringResource ID="SCOM.Health.ConfigFileAge.Rule.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="SCOM.Health">
          <Name>SCOM Health</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.AgentProxyDefaultCheck.Monitor">
          <Name>SCOM Health - Agent Proxy Default Check Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.AgentProxyDefaultCheck.Monitor.AlertMessage">
          <Name>SCOM Health - Agent Proxy Default Check</Name>
          <Description>SCOM Agent Proxy Default is not set correctly</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.AgentProxyDefaultCheck.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.AgentProxyDefaultCheck.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ConfigFileAge.Rule">
          <Name>SCOM Health - Config File Age Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ConfigFileAge.Rule.AlertMessage">
          <Name>SCOM Health - Agent config file might not be updating</Name>
          <Description>The Agent Configuration file is older than the threshold:
Message: {1}
Age of the config file in hours: {2}
Config file threshold in hours: {3}</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.DWRetentionConfigured.Monitor">
          <Name>SCOM Health - Data Warehouse Retention Configured Monitor</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.DWRetentionConfigured.Monitor.AlertMessage">
          <Name>SCOM Health - Data Warehouse Retention has not been configured</Name>
          <Description>Data Warehouse Retention has not been configured according to the settings in the Monitor</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.DWRetentionConfigured.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.DWRetentionConfigured.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.EventLogSize.Monitor">
          <Name>SCOM Health - Event Log Size Check Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.EventLogSize.Monitor.AlertMessage">
          <Name>SCOM Health - Event Log Size is not correct</Name>
          <Description>Event Log Size Monitor: detected an OpsMgr Event log size that is not expanded to the expected setting of the Monitor</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.EventLogSize.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.EventLogSize.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.HealthServiceStoreSize.FileSize.Collection.Rule">
          <Name>SCOM Health - Health Service Database File Size Perf Collection Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.HealthServiceStoreSize.FileSize.Perf.View">
          <Name>HealthService Store FileSize</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.HealthServiceStoreSize.OfflineDefrag.Task">
          <Name>SCOM Health - Service Database Offline Defrag Task</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.LicenseCheck.Monitor">
          <Name>SCOM Health - License Check Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.LicenseCheck.Monitor.AlertMessage">
          <Name>SCOM Health - License is not configured</Name>
          <Description>SCOM License key is not configured</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.LicenseCheck.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.LicenseCheck.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.OpsDBandLogSize.Monitor">
          <Name>SCOM Health - Ops DB and Log Sizing Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.OpsDBandLogSize.Monitor.AlertMessage">
          <Name>SCOM Health - Ops DB and Log Size problem</Name>
          <Description>Ops DB and Log Size Monitor: detected a bad condition.  See Health Explorer for details</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.OpsDBandLogSize.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.OpsDBandLogSize.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor">
          <Name>SCOM Health - Agent Installed On Management Server Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor.AlertMessage">
          <Name>SCOM Health - Agent is installed on a management server</Name>
          <Description>Registry Monitor detected the registry path [HKLM\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups] exists.
					Agents should never be installed on management servers as a best practice.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor" SubElementID="Success">
          <Name>RegMissing</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor" SubElementID="Warning">
          <Name>RegExists</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor">
          <Name>SCOM Health - Data Warehouse Registry CommandTimeoutSeconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor.AlertMessage">
          <Name>SCOM Health - Data Warehouse Registry CommandTimeoutSeconds Monitor Alert</Name>
          <Description>Data Warehouse Registry CommandTimeoutSeconds Monitor detected the registry value at SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\Command Timeout Seconds is missing or does not meet expected value of "(1800)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor">
          <Name>SCOM Health - Registry DALInitiateClearPool Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor.AlertMessage">
          <Name>SCOM Health - Registry DALInitiateClearPool Monitor Alert</Name>
          <Description>Registry DALInitiateClearPool Monitor detected the registry value at SOFTWARE\Microsoft\System Center\2010\Common\DAL\DALInitiateClearPool is missing or does not meet expected value of "(1)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor">
          <Name>SCOM Health - Registry DALInitiateClearPoolSeconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor.AlertMessage">
          <Name>SCOM Health - Registry DALInitiateClearPoolSeconds Monitor Alert</Name>
          <Description>Registry DALInitiateClearPoolSeconds Monitor detected the registry value at SOFTWARE\Microsoft\System Center\2010\Common\DAL\DALInitiateClearPoolSeconds is missing or does not meet expected value of "(60)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor">
          <Name>SCOM Health - Data Warehouse Registry DeploymentCommandTimeoutSeconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor.AlertMessage">
          <Name>SCOM Health - Data Warehouse Registry DeploymentCommandTimeoutSeconds Monitor Alert</Name>
          <Description>Data Warehouse Registry DeploymentCommandTimeoutSeconds Monitor detected the registry value at SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\Deployment Command Timeout Seconds is missing or does not meet expected value of "(86400)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor">
          <Name>SCOM Health - Registry GroupCalcPollingIntervalMilliseconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor.AlertMessage">
          <Name>SCOM Health - Registry GroupCalcPollingIntervalMilliseconds Monitor Alert</Name>
          <Description>Registry GroupCalcPollingIntervalMilliseconds Monitor detected the registry value at SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\GroupCalcPollingIntervalMilliseconds is missing or does not meet expected value of "(900000)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor">
          <Name>SCOM Health - Registry PersistenceCheckpointDepthMaximum Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor.AlertMessage">
          <Name>SCOM Health - Registry PersistenceCheckpointDepthMaximum Monitor Alert</Name>
          <Description>Registry PersistenceCheckpointDepthMaximum Monitor detected the registry value at SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Persistence Checkpoint Depth Maximum is missing or does not meet expected value of "(104857600)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.StateQueueItems.Monitor">
          <Name>SCOM Health - Registry StateQueueItems Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.StateQueueItems.Monitor.AlertMessage">
          <Name>SCOM Health - Registry StateQueueItems Monitor Alert</Name>
          <Description>Registry StateQueueItems Monitor detected the registry value at SYSTEM\CurrentControlSet\Services\HealthService\Parameters\State Queue Items is missing or does not meet expected value of "(20480)"</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.StateQueueItems.Monitor" SubElementID="Success">
          <Name>RegValueMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueContent.StateQueueItems.Monitor" SubElementID="Warning">
          <Name>RegValueDoesNotMatch</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor">
          <Name>SCOM Health - Registry PoolLeaseRequestPeriodSeconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor.AlertMessage">
          <Name>SCOM Health - Registry PoolLeaseRequestPeriodSeconds Exists</Name>
          <Description>Registry PoolLeaseRequestPeriodSeconds Monitor detected the registry path SYSTEM\CurrentControlSet\Services\HealthService\Parameters\PoolManager\PoolLeaseRequestPeriodSeconds exists.
					This registry setting should generally not be configured as a best practice.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor" SubElementID="Success">
          <Name>RegValueMissing</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor" SubElementID="Warning">
          <Name>RegValueExists</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor">
          <Name>SCOM Health - Registry PoolNetworkLatencySeconds Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor.AlertMessage">
          <Name>SCOM Health - Registry PoolNetworkLatencySeconds Monitor Alert</Name>
          <Description>Registry PoolNetworkLatencySeconds Monitor detected the registry path SYSTEM\CurrentControlSet\Services\HealthService\Parameters\PoolManager\PoolNetworkLatencySeconds exists.
					This registry setting should generally not be configured as a best practice.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor" SubElementID="Success">
          <Name>RegValueMissing</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor" SubElementID="Warning">
          <Name>RegValueExists</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ResourcePoolObserverCheck.Monitor">
          <Name>SCOM Health - Resource Pool Default Observer Setting Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ResourcePoolObserverCheck.Monitor.AlertMessage">
          <Name>SCOM Health - Resource Pool Default Observer setting is not optimal</Name>
          <Description>SCOM Resource Pool Default Observer is not optimized.  Resource pools with 3 management servers or 5 or more management servers should not use a default observer.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ResourcePoolObserverCheck.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ResourcePoolObserverCheck.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.RootFolder">
          <Name>SCOM Health</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor">
          <Name>SCOM Health - SCOM Admins User Role Configuration Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor.AlertMessage">
          <Name>SCOM Health - SCOM Admins User Role Requires Configuration</Name>
          <Description>SCOM Admins User Role Configuration detected that the default BUILTIN\Administrators is present.</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.TempDBOptimized.Monitor">
          <Name>SCOM Health - TempDB Optimized Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.TempDBOptimized.Monitor.AlertMessage">
          <Name>SCOM Health - TempDB is not optimized</Name>
          <Description>TempDB FileCount Monitor: detected the the TempDB is not optimized for the number of logical CPUs</Description>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.TempDBOptimized.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.TempDBOptimized.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ConfigFileAge.Rule" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ConfigFileAge.Rule" SubElementID="CD">
          <Name>CD</Name>
        </DisplayString>
        <DisplayString ElementID="SCOM.Health.ConfigFileAge.Rule" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="SCOM.Health.AgentProxyDefaultCheck.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor inspects the default value for Agent Proxy.</maml:para>
              <maml:para>If the default setting has not been changed to "True" this monitor will change to an unhealthy state.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2017/04/10/enable-proxy-as-a-default-setting-in-scom-2016/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.ConfigFileAge.Rule" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule inspects the agents config file age.  If the config file last modified time is older than the threshold, this rull will generate an alert.  </maml:para>
              <maml:para>This might mean that the agent is stale and not updating config, and needs to have the cache flushed.</maml:para>
              <maml:para>This might mean the config service on the management server is not processing config changes.</maml:para>
              <maml:para>This might mean that no changes have been processed for the agent and you just need a longer default threshold.</maml:para>
              <maml:para>The rule runs a script once per day by default, and does not initialize immediately after the health service starts up, to allow time for the config file to update on agents that have been down for a considerable amount of time to reduce false alerts.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.DWRetentionConfigured.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the Data Warehouse dataset retention settings.</maml:para>
              <maml:para>If we detect that the DW retention is not set to the settings in the monitor for each Dataset type, then this monitor will be unhealthy.</maml:para>
              <maml:para>Your should adjust the monitor default retention values for each Dataset to match your requirements, then this monitor will ensure those are set correctly in the Warehouse</maml:para>
              <maml:para>It is a best practice to proactively adjust your DW retention according to your reporting SLA's.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2010/01/05/understanding-and-modifying-data-warehouse-retention-and-grooming/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.EventLogSize.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the event log size of the OperationsManager event log on Management Servers.</maml:para>
              <maml:para>If the event log has not been expanded to at least 60 megabytes, it will be unhealthy.</maml:para>
              <maml:para>In order to ensure there is enough space to capture several days worth of events, the OpsMgr event logs should be set to between 60 and 100 MB in size.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2016/10/22/opsmgr-2016-quickstart-deployment-guide/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.HealthServiceStoreSize.FileSize.Collection.Rule" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule collects the health service store (Healthservice.edb) filesize.  In some rare cases, the health service store jet database file can grow very large and requires a cache flush in order to repair.</maml:para>
              <maml:para>For additional details see https://blogs.technet.microsoft.com/jimmyharper/2015/09/02/management-pack-to-monitor-and-reduce-health-service-store-size/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.LicenseCheck.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor will check to see if the SCOM management group has been licensed.</maml:para>
              <maml:para>If the SCOM Management Group is in EVAL licensing mode, it will be unhealthy.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2017/06/29/dont-forget-to-license-your-scom-2016-deployments/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.OpsDBandLogSize.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the Operations DB size and transaction log size.</maml:para>
              <maml:para>If the OperationsManager database is less than a threshold in size it will be unhealthy.</maml:para>
              <maml:para>If the OperationsManager TLOG is less than a threshold in size it will be unhealthy.</maml:para>
              <maml:para>The threshold settings are overrideable.</maml:para>
              <maml:para>The default settings are 30GB for DB and 15GB for log.  You should set these to your minimum size expected, to monitor when someone changes the DB size, or log file size too small.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2016/10/22/opsmgr-2016-quickstart-deployment-guide/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegKeyExists.AgentOnManagementServer.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor inspects the registry to see if an agent has been installed on a Management Server.</maml:para>
              <maml:para>This is a VERY bad condition, as agents will cause the Management Server service to restart every 10 minutes, causing resource pool instability.  This is because agents will restart the Healthservice anytime the MonitoringHost.exe process, or Healthservice.exe process use a large amount of memory or handles.  That is a normal condition on a management server.</maml:para>
              <maml:para>In general, it is not a best practice to place agents on management servers.</maml:para>
              <maml:para>To recover from this situation, delete the "Agent Management Groups" key at:  HKLM:\\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Agent Management Groups</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.CommandTimeoutSeconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\</maml:para>
              <maml:para>REG_DWORD Decimal Value:    Command Timeout Seconds = 1800</maml:para>
              <maml:para>SCOM 2016 existing registry value:  (not preset)</maml:para>
              <maml:para>SCOM 2016 default code value:  600</maml:para>
              <maml:para>Description:  This helps with dataset maintenance as the default timeout of 10 minutes is often too short.  Setting this to a longer value helps reduce the 31552 events you might see with standard database maintenance.  This is a very common issue.   http://blogs.technet.com/b/kevinholman/archive/2010/08/30/the-31552-event-or-why-is-my-data-warehouse-server-consuming-so-much-cpu.aspx  This should be adjusted to however long it takes aggregations or other maintenance to run in your environment.  We need this to complete in less than one hour, so if it takes more than 30 minutes to complete, you really need to investigate why it is so slow, either from too much data or SQL performance issues.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.DALInitiateClearPool.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SOFTWARE\Microsoft\System Center\2010\Common\DAL\</maml:para>
              <maml:para>REG_DWORD Decimal Value:</maml:para>
              <maml:para>DALInitiateClearPool = 1</maml:para>
              <maml:para>DALInitiateClearPoolSeconds = 60</maml:para>
              <maml:para>SCOM 2016 existing registry value:   not present</maml:para>
              <maml:para>Description:  This is a critical setting on ALL management servers in ANY management group.  This setting configures the SDK service to attempt a reconnection to SQL server upon disconnection, on a regular basis.  Without these settings, an extended SQL outage can cause a management server to never reconnect back to SQL when SQL comes back online after an outage.   Per:  http://support.microsoft.com/kb/2913046/en-us  All management servers in a management group should get the registry change.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.DALInitiateClearPoolSeconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SOFTWARE\Microsoft\System Center\2010\Common\DAL\</maml:para>
              <maml:para>REG_DWORD Decimal Value:</maml:para>
              <maml:para>DALInitiateClearPool = 1</maml:para>
              <maml:para>DALInitiateClearPoolSeconds = 60</maml:para>
              <maml:para>SCOM 2016 existing registry value:   not present</maml:para>
              <maml:para>Description:  This is a critical setting on ALL management servers in ANY management group.  This setting configures the SDK service to attempt a reconnection to SQL server upon disconnection, on a regular basis.  Without these settings, an extended SQL outage can cause a management server to never reconnect back to SQL when SQL comes back online after an outage.   Per:  http://support.microsoft.com/kb/2913046/en-us  All management servers in a management group should get the registry change.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.DeploymentCommandTimeoutSeconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse\</maml:para>
              <maml:para>REG_DWORD Decimal Value:    Deployment Command Timeout Seconds = 86400</maml:para>
              <maml:para>SCOM 2016 existing registry value:  (not preset)</maml:para>
              <maml:para>SCOM 2016 default code value:  10800 (3 hours)</maml:para>
              <maml:para>Description:  This helps with deployment of heavy handed scripts that are applied during version upgrades and cumulative updates.  Customers often see blocking on the DW database for creating indexes, and this causes the script not to be able to deployed in the default of 3 hours.  Setting this value to allow for one full day to deploy the script resolves most customer issues.  Setting this to a longer value helps reduce the 31552 events you might see with standard database maintenance after a version upgrade or UR deployment.  This is a very common issue in large environments are very large warehouse databases.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.GroupCalcPollingIntervalMilliseconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\</maml:para>
              <maml:para>REG_DWORD Decimal Value:       GroupCalcPollingIntervalMilliseconds = 900000</maml:para>
              <maml:para>SCOM 2016 existing registry value:  (not present)</maml:para>
              <maml:para>SCOM 2016 default code value:  30000 (30 seconds)</maml:para>
              <maml:para>Description:  This setting will slow down how often group calculation runs to find changes in group memberships.  Group calculation can be very expensive, especially with a large number of groups, large agent count, or complex group membership expressions.  Slowing this down will help keep groupcalc from consuming all the healthservice and database I/O.  900000 is every 15 minutes.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.PersistenceCheckpointDepthMaximum.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SYSTEM\CurrentControlSet\services\HealthService\Parameters\</maml:para>
              <maml:para>REG_DWORD Decimal Value:  Persistence Checkpoint Depth Maximum = 104857600</maml:para>
              <maml:para>SCOM 2016 default existing registry value = 20971520</maml:para>
              <maml:para>Description:  Management Servers that host a large amount of agentless objects, which results in the MS running a large number of workflows: (network/URL/Linux/3rd party/VEEAM)  This is an ESE DB setting which controls how often ESE writes to disk.  A larger value will decrease disk IO caused by the SCOM healthservice but increase ESE recovery time in the case of a healthservice crash.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueContent.StateQueueItems.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>HKLM\SYSTEM\CurrentControlSet\services\HealthService\Parameters\</maml:para>
              <maml:para>REG_DWORD Decimal Value:        State Queue Items = 20480</maml:para>
              <maml:para>SCOM 2016 default existing registry value:   (not present)</maml:para>
              <maml:para>SCOM 2016 default value in code:   10240</maml:para>
              <maml:para>Description:  This sets the maximum size of healthservice internal state queue.  It should be equal or larger than the number of monitor based workflows running in a healthservice.  Too small of a value, or too many workflows will cause state change loss.  http://blogs.msdn.com/b/rslaten/archive/2008/08/27/event-5206.aspx</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueExists.PoolLeaseRequestPeriodSeconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>This registry entry SHOULD NOT EXIST as a best practice in most cases.</maml:para>
              <maml:para>HKLM\SYSTEM\CurrentControlSet\services\HealthService\Parameters\PoolManager\</maml:para>
              <maml:para>This is VERY RARE to change, and in general I only recommend changing this under advisement from a support case.  The resource pools work quite well on their own, and I have worked with very large environments that did not need these to be modified.  This is more common when you are dealing with a rare condition, such as management group spread across datacenters with high latency links, DR sites, MASSIVE number of workflows running on management servers, etc.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.RegValueExists.PoolNetworkLatencySeconds.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the value for a registry value that optimizes management servers for large environments.</maml:para>
              <maml:para>This registry entry SHOULD NOT EXIST as a best practice in most cases.</maml:para>
              <maml:para>HKLM\SYSTEM\CurrentControlSet\services\HealthService\Parameters\PoolManager\</maml:para>
              <maml:para>This is VERY RARE to change, and in general I only recommend changing this under advisement from a support case.  The resource pools work quite well on their own, and I have worked with very large environments that did not need these to be modified.  This is more common when you are dealing with a rare condition, such as management group spread across datacenters with high latency links, DR sites, MASSIVE number of workflows running on management servers, etc.</maml:para>
              <maml:para>See the details at:</maml:para>
              <maml:para>https://blogs.technet.microsoft.com/kevinholman/2017/03/08/recommended-registry-tweaks-for-scom-2016-management-servers/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.ResourcePoolObserverCheck.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the resource pool membership, and the Default Observer setting.</maml:para>
              <maml:para>If the pool has exactly 3 members, OR if the pool has 5 or more members, then the default observer should be disabled.  If that is not done, the monitor will be unhealthy.</maml:para>
              <maml:para>See:  https://blogs.technet.microsoft.com/kevinholman/2016/11/21/understanding-scom-resource-pools/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.SCOMAdminsUserRoleConfigured.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor checks the Operations Manager management group user profiles for the Administrator role, and will be unhealthy if BUILTIN\Administrators is detected.</maml:para>
              <maml:para>If BUILTIN\Administrators is present, then ANY user who has local admin rights on a management server, also has Administrator level rights within SCOM.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="SCOM.Health.TempDBOptimized.Monitor" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This monitor inspects the TempDB in the same SQL instance that the Operations Manager database uses.  It looks to ensure there are more than one TempDB file.</maml:para>
              <maml:para>It does not ensure there is exactly one TempDB file per CPU, up to a maximum of 8 files, all of the same size, which is the best practice.  It simply checks and will be unhealthy if only a single TempDB file exists, which is indicative a non-optimized system.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>